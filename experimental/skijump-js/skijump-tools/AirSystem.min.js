function AirSystem(){this.angle=Math.random()*TWO_PI,this.airForce=15,this.airDensity=1e-4,this.update=()=>{if(this.angle+=this.getAngleMod(),ui.updateAirAngle(this.angle),jumper.body.isStatic)return;const forceVector=this.calculateAerodynamicForce(),newVelocity=Matter.Vector.add(jumper.body.velocity,forceVector);Body.setVelocity(jumper.body,newVelocity)},this.getAngleMod=()=>{const changeAbout=.1*Math.pow(Math.random(),6),tempAngle=this.angle+QUARTER_PI,directionMod=Math.abs(.5*Math.sin(tempAngle))+.1,changeDir=Math.random()-directionMod;return changeDir*changeAbout},this.calculateAerodynamicForce=()=>{const relativeVelocity=this.getrelativeVelocity(),relVelSqr=Matter.Vector.magnitudeSquared(relativeVelocity),liftMod=1;let force=this.airDensity*relVelSqr*1*.5,forceAngle=this.getVectorAngle(relativeVelocity)-HALF_PI;return forceVector=this.getVectorFromAngle(forceAngle,force),forceVector},this.getrelativeVelocity=()=>{const airVelocity=this.getAirVelocity();return Matter.Vector.sub(jumper.body.velocity,airVelocity)},this.getAirVelocity=()=>this.getVectorFromAngle(this.angle,this.airForce),this.getVectorAngle=vector=>Math.atan2(vector.y,vector.x),this.getVectorFromAngle=(angle,length=1)=>{const x=Math.cos(angle)*length,y=Math.sin(angle)*length;return Matter.Vector.create(x,y)}}
function AirSystem(){this.angle=Math.random()*TWO_PI,this.airForce=15,this.AIR_CHANGER_MOD=.08,this.airDensity=1e-4,this.update=()=>{this.angle+=(Math.random()-.5)*this.AIR_CHANGER_MOD,ui.updateAirAngle(this.angle);const forceVector=this.calculateAerodynamicForce();if(jumper.body.isStatic)return;const newVelocity=Matter.Vector.add(jumper.body.velocity,forceVector);Body.setVelocity(jumper.body,newVelocity)},this.calculateAerodynamicForce=()=>{const relativeVelocity=this.getrelativeVelocity(),relVelSqr=Matter.Vector.magnitudeSquared(relativeVelocity),liftMod=1;let force=this.airDensity*jumper.S*relVelSqr*1*.5,forceAngle=this.getVectorAngle(relativeVelocity)-HALF_PI;forceVector=this.getVectorFromAngle(forceAngle,force),push(),translate(jumper.body.position.x,jumper.body.position.y),strokeWeight(2),fill(0);let vec=jumper.body.velocity;return vec=Matter.Vector.mult(this.getAirVelocity(),30),stroke(255,0,0),vec=Matter.Vector.mult(relativeVelocity,5),stroke(0,0,255),vec=Matter.Vector.mult(forceVector,1e3),stroke(200,108,0),line(0,0,vec.x,vec.y),pop(),forceVector},this.getrelativeVelocity=()=>{const airVelocity=this.getAirVelocity();return Matter.Vector.sub(jumper.body.velocity,airVelocity)},this.getAirVelocity=()=>this.getVectorFromAngle(this.angle,this.airForce),this.getVectorAngle=vector=>Math.atan2(vector.y,vector.x),this.getVectorFromAngle=(angle,length=1)=>{const x=Math.cos(angle)*length,y=Math.sin(angle)*length;return Matter.Vector.create(x,y)}}
function PullingSystem(){this.pullingArray=PAD_PULLING_POINTS,this.p1=null,this.p2=null,this.index=2,this.friction=jumper.friction,this.setIndex=newIndex=>{this.index=newIndex,this.p1=this.pullingArray[newIndex-1],this.p2=this.pullingArray[newIndex]},this.update=()=>{const jumperPos=jumper.body.position;if(jumperPos.x>=this.p2.x){if(this.index++,!(this.index<this.pullingArray.length))return this.index=1,!1;this.p1=this.p2,this.p2=this.pullingArray[this.index]}return jumperPos.x>=JUMP_POINT&&jumperPos.x<=JUMP_END_POINT&&(pad.canJump=!0,MessagesManager.canJump()),jumper.isSlowingDown||jumperPos.x>=FALL_LINE&&(jumper.isSlowingDown=!0,camera.isFollowingJumper=!1,window.setTimeout(()=>{callDeffered(restartGame)},1e3)),!0},this.setNewVelocityAndAngle=()=>{const diff_x=this.p2.x-this.p1.x,diff_y=this.p2.y-this.p1.y,alpha=Math.atan2(diff_y,diff_x),acc=Math.sin(alpha)*world.gravity.y,currVel=jumper.body.velocity,currVelMag=Matter.Vector.magnitude(currVel),velAlpha=Math.atan2(currVel.y,currVel.x),diffAlpha=velAlpha-alpha;Body.setAngle(jumper.body,alpha+jumper.offsetAngle);let newVel=Matter.Vector.create(0,0);newVel.x=Math.cos(diffAlpha)*currVelMag,newVel=Matter.Vector.rotate(newVel,alpha);let accVec=Matter.Vector.create(acc,0);accVec=Matter.Vector.rotate(accVec,alpha),newVel=Matter.Vector.add(newVel,accVec),newVel=Matter.Vector.mult(newVel,1-this.friction),jumper.body.velocity=newVel},this.setIndex(2)}
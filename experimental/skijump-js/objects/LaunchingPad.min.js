function LaunchingPad(){this.body=PadCreator.createPadBody(),World.add(world,this.body),this.img=PadCreator.padImg,this.isWaitingForLaunch=!0,this.isPullingJumper=!1,this.canJump=!1,this.pullingSystem={pullingArray:PAD_PULLING_POINTS,p1:null,p2:null,index:2,friction:jumper.friction,setIndex:newIndex=>{const{pullingSystem:pullingSystem}=this,{pullingArray:pullingArray}=pullingSystem;pullingSystem.index=newIndex,pullingSystem.p1=pullingArray[newIndex-1],pullingSystem.p2=pullingArray[newIndex]},update:()=>{const{position:position}=jumper.body,{pullingSystem:pullingSystem}=this,{pullingArray:pullingArray}=pullingSystem;if(position.x>=pullingSystem.p2.x){if(pullingSystem.index++,!(pullingSystem.index<pullingArray.length))return pullingSystem.index=1,this.isPullingJumper=!1,this.canJump=!1,ui.updateMessageLabel("Use ARROWS to rotate"),!1;pullingSystem.p1=pullingSystem.p2,pullingSystem.p2=pullingArray[pullingSystem.index]}return position.x>=JUMP_POINT&&position.x<=JUMP_END_POINT&&(this.canJump=!0,ui.updateMessageLabel("Press SPACE to jump")),jumper.isSlowingDown||position.x>=FALL_LINE&&(jumper.isSlowingDown=!0,camera.isFollowingJumper=!1,window.setTimeout(()=>{callDeffered(restartGame)},1e3)),!0},getNewVelocity:()=>{const diff_x=this.pullingSystem.p2.x-this.pullingSystem.p1.x,diff_y=this.pullingSystem.p2.y-this.pullingSystem.p1.y,alpha=Math.atan2(diff_y,diff_x),acc=Math.sin(alpha)*world.gravity.y,currVel=jumper.body.velocity,currVelMag=Matter.Vector.magnitude(currVel),velAlpha=Math.atan2(currVel.y,currVel.x),diffAlpha=velAlpha-alpha;Body.setAngle(jumper.body,alpha);let newVel=Matter.Vector.create(0,0);newVel.x=Math.cos(diffAlpha)*currVelMag,newVel=Matter.Vector.rotate(newVel,alpha);let accVec=Matter.Vector.create(acc,0);return accVec=Matter.Vector.rotate(accVec,alpha),newVel=Matter.Vector.add(newVel,accVec),newVel=Matter.Vector.mult(newVel,1-this.pullingSystem.friction)}},this.pullingSystem.setIndex(2),this.update=()=>{this.isPullingJumper&&(this.pullingSystem.update()?this.setJumperVelocity():this.setJumperDynamic())},this.setJumperVelocity=()=>{const vel=this.pullingSystem.getNewVelocity();jumper.body.velocity=vel},this.launch=()=>{this.isWaitingForLaunch=!1,this.isPullingJumper=!0,ui.updateMessageLabel("")},this.setJumperDynamic=()=>{jumper.letSteering(),Body.setVelocity(jumper.body,jumper.body.velocity)},this.startPullingJumper=()=>{this.isPullingJumper=!0,this.pullingSystem.friction=2*jumper.friction,this.pullingSystem.pullingArray=PAD_COLLISION_POINTS;for(let i=0;i<PAD_COLLISION_POINTS.length;i++){const point=PAD_COLLISION_POINTS[i];if(point.x>=jumper.body.position.x)return void this.pullingSystem.setIndex(i)}},this.draw=()=>{push(),fill(50,50,255,128),push(),scale(PAD_SCALE),image(this.img,0,0),pop(),pop()},this.onKeyPressed=keyCode=>{"Space"==keyCode&&(this.canJump?(this.setJumperDynamic(),jumper.jump()):this.isWaitingForLaunch&&this.launch())}}
SJ.Jumper=class{constructor(x,y){this.start_x=x,this.start_y=y,this._w=10,this._h=20;const options={friction:0,frictionAir:SJ.V.airFriction,density:1,isStatic:!0,parts:[Matter.Bodies.rectangle(x,y,this._w,this._h),Matter.Bodies.rectangle(x+5,y+.5*this._h+3,this._w+15,5),Matter.Bodies.circle(x-.5*this._w-5,y+.5*this._h+2.5,3),Matter.Bodies.circle(x+.5*this._w+12,y+.5*this._h+2.5,3)]};this.realBodyStatic=!0,this.body=Matter.Body.create(options),Matter.World.add(SJ.world,this.body),Matter.Body.setAngle(this.body,radians(40)),this.offsetAngle=0,this.isSlowingDown=!1,this.SLOWING_SPEED=.01,this.turningDir=0,this.turningMod=0,this.wantTurn=!1,this.canSteer=!1,this.isFlying=!1,this.canLand=!1,this.isLanding=!1,this.landingTimeCounter=0,this.LANDING_TIME_MILLIS=200,this.landed=!1,this.failed=!1,this.offsetPoint=Matter.Vector.create(0,-10)}update(){this.body.isStatic&&(this.isSlowingDown&&(this.body.velocity.x=lerp(this.body.velocity.x,0,this.SLOWING_SPEED),this.body.velocity.y=lerp(this.body.velocity.y,0,this.SLOWING_SPEED)),Matter.Body.translate(this.body,this.body.velocity)),this.isFlying&&(this.isLanding&&(this.landingTimeCounter+=deltaTime,this.landingTimeCounter>=this.LANDING_TIME_MILLIS&&(print("Land ended"),this.isLanding=!1,this.landed=!0,SJ.scoreCounter.onJumperLand())),Matter.Query.collides(this.body,[SJ.pad.body]).length>0?this.onPadHit():this.canSteer&&this.turningMod&&(this.wantTurn?this.turningMod=lerp(this.turningMod,.5,.02):this.turningMod=lerp(this.turningMod,0,.04),this.turn()))}onPadHit(){Matter.Body.setStatic(this.body,!0),this.canSteer=!1,this.isFlying=!1,this.checkIfFail(),SJ.main.onJumperPadHit()}checkIfFail(){const angle=this.getNormalizedBodyAngle(),padAngle=this.getPadAngle(),diffAngle=angle-padAngle;abs(diffAngle)>=radians(SJ.V.goodLandingAngle)||!this.landed?(print("Fail: ",degrees(diffAngle)),this.offsetAngle=diffAngle<0?-HALF_PI:HALF_PI,SJ.MessagesManager.fail(),this.failed=!0,print("FAILED")):SJ.MessagesManager.noFail()}testNormalizedAngle(enterAngle,exeptedAngle){print(this.normalizeAngle(enterAngle)===exeptedAngle?"OK":"Test failed for:\nEA:"+enterAngle+"\nEA:"+exeptedAngle)}getNormalizedBodyAngle(){return this.normalizeAngle(this.body.angle)}normalizeAngle(angle){for(;angle>PI;)angle-=TWO_PI;for(;angle<-PI;)angle+=TWO_PI;return angle}getPadAngle(){const diffX=SJ.pad._pullingSystem.p2.x-SJ.pad._pullingSystem.p1.x,diffY=SJ.pad._pullingSystem.p2.y-SJ.pad._pullingSystem.p1.y,padAngle=atan2(diffY,diffX);return padAngle}draw(){const pos=this.body.position,angle=this.body.angle;push(),translate(pos.x,pos.y),rotate(angle),fill(255),rectMode(CENTER),rect(0,0,this._w,this._h),pop(),this.body.parts.forEach(part=>{beginShape(),part.vertices.forEach(element=>{vertex(element.x,element.y)}),endShape(CLOSE)})}_drawVelocityVector(){push(),translate(pos.x,pos.y),scale(3),line(0,0,this.body.velocity.x,this.body.velocity.y),pop()}onKeyPressed(){keyCode==LEFT_ARROW?this.wantTurnTo(-1):keyCode==RIGHT_ARROW?this.wantTurnTo(1):keyCode==SPACE&&(this.body.isStatic||this.canLand&&this.land())}onKeyReleased(){keyCode!=LEFT_ARROW&&keyCode!=RIGHT_ARROW||(this.wantTurn=!1)}onScreenTouched(){this.setTurnDirByTouch()}onScreenTouchMoved(){this.setTurnDirByTouch()}setTurnDirByTouch(){SJ.mouseScreenX<.5*SJ.SCREEN_WIDTH?this.wantTurnTo(-1):this.wantTurnTo(1)}onScreenTouchEnded(){this.wantTurn=!1}wantTurnTo(dir){this.turningDir=dir,this.wantTurn=!0,this.turningMod=.1}land(){this.canLand=!1,this.isLanding=!0,this.canSteer=!1}jump(){this.accelerateWithForce(SJ.V.jumperJumpForce),SJ.scoreCounter.jumpRater.rate(),this.canLand=!0}accelerateWithForce(force){const jumpAngle=this.body.angle;let jumpVector=Matter.Vector.create(0,-force);jumpVector=Matter.Vector.rotate(jumpVector,jumpAngle);const newVelocity=Matter.Vector.add(this.body.velocity,jumpVector);Matter.Body.setVelocity(this.body,newVelocity)}letSteering(){Matter.Body.setStatic(this.body,!1),this.canSteer=!0}turn(){let deltaAngle=SJ.V.jumperTurnForce*this.turningMod*this.turningDir,angle=this.body.angle+deltaAngle;this.setAngle(angle)}setAngle(angle){Matter.Body.setAngle(this.body,angle)}};
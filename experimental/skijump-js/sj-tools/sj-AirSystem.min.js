SJ.AirSystem=class{constructor(){this.angle=random(TWO_PI),this.airForce=random(SJ.V.airMinForce,SJ.V.airMaxForce)}update(){for(this.angle+=this.getAngleMod();this.angle<-PI;)this.angle+=TWO_PI;for(;this.angle>PI;)this.angle-=TWO_PI;if(this.airForce=this.getNextForce(),SJ.ui.updateAirAngle(this.angle),SJ.jumper.body.isStatic)return;const forceVector=this.calculateAerodynamicForce(),newVelocity=Matter.Vector.add(SJ.jumper.body.velocity,forceVector);Matter.Body.setVelocity(SJ.jumper.body,newVelocity);const rotateForce=this.calculateJumperRotateForce(),newAngularVelocity=(SJ.jumper.body.angularVelocity+rotateForce)*SJ.V.jumperAngularFriction;Matter.Body.setAngularVelocity(SJ.jumper.body,newAngularVelocity)}getAngleMod(){const changeAbout=pow(random(),2)*SJ.V.airDynamics,changeDir=random(-1,1);return changeDir*changeAbout}getNextForce(){const newForce=this.airForce+random(-.5,.5)*SJ.V.airDynamics;return constrain(newForce,SJ.V.airMinForce,SJ.V.airMaxForce)}calculateAerodynamicForce(){const relativeVelocity=this.getRelativeVelocity(),relVelSqr=Matter.Vector.magnitudeSquared(relativeVelocity),liftMod=1;let force=SJ.V.airDensity*relVelSqr*1*.5,forceAngle=this.getVectorAngle(relativeVelocity)-HALF_PI;const forceVector=this.getVectorFromAngle(forceAngle,force);return forceVector}getRelativeVelocity(){const airVelocity=this.getAirVelocity();return Matter.Vector.sub(SJ.jumper.body.velocity,airVelocity)}getAirVelocity(){return this.getVectorFromAngle(this.angle,this.airForce)}calculateJumperRotateForce(){let relativeAngle=this.getRelativeAngle();abs(relativeAngle)<.07&&(relativeAngle=0);const relativeVelocityMagnitude=Matter.Vector.magnitude(this.getRelativeVelocity());let rotateForce=relativeVelocityMagnitude*SJ.V.airRotateForce;const MAX_ROTATE_FORCE=.1;return rotateForce=min(rotateForce,.1),relativeAngle*(rotateForce=max(rotateForce,-.1))}getRelativeAngle(){let jumperAngle=SJ.jumper.body.angle;if(this.isWindFacingRight())return jumperAngle-this.angle;{let angle=0;return jumperAngle-(angle=this.angle>0?this.angle-PI:this.angle+PI)}}isWindFacingRight(){return abs(this.angle)<HALF_PI}getVectorAngle(vector){return atan2(vector.y,vector.x)}getVectorFromAngle(angle,length=1){const x=cos(angle)*length,y=sin(angle)*length;return Matter.Vector.create(x,y)}};
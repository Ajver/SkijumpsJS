function AirSystem(){this.angle=random()*TWO_PI,this.airForce=15,this.airDensity=1e-4,this.update=()=>{if(this.angle+=this.getAngleMod(),SJ.ui.updateAirAngle(this.angle),SJ.jumper.body.isStatic)return;const forceVector=this.calculateAerodynamicForce(),newVelocity=Matter.Vector.add(SJ.jumper.body.velocity,forceVector);Matter.Body.setVelocity(SJ.jumper.body,newVelocity);const rotateForce=this.calculateJumperRotateForce(),newAngularVelocity=(SJ.jumper.body.angularVelocity+rotateForce)*SJ.jumper.angularFriction;Matter.Body.setAngularVelocity(SJ.jumper.body,newAngularVelocity)},this.getAngleMod=()=>{const changeAbout=.1*pow(random(),6),tempAngle=this.angle+QUARTER_PI,directionMod=abs(.5*sin(tempAngle))+.1,changeDir=random()-directionMod;return changeDir*changeAbout},this.calculateAerodynamicForce=()=>{const relativeVelocity=this.getRelativeVelocity(),relVelSqr=Matter.Vector.magnitudeSquared(relativeVelocity),liftMod=1;let force=this.airDensity*relVelSqr*1*.5,forceAngle=this.getVectorAngle(relativeVelocity)-HALF_PI;return forceVector=this.getVectorFromAngle(forceAngle,force),forceVector},this.getRelativeVelocity=()=>{const airVelocity=this.getAirVelocity();return Matter.Vector.sub(SJ.jumper.body.velocity,airVelocity)},this.getAirVelocity=()=>this.getVectorFromAngle(this.angle,this.airForce),this.calculateJumperRotateForce=()=>{const relativeAngle=this.getRelativeAngle();let rotateForce=Matter.Vector.magnitude(this.getRelativeVelocity())*this.airDensity;return rotateForce=min(rotateForce,1),relativeAngle*(rotateForce=max(rotateForce,-1))},this.getRelativeAngle=()=>{let relativeAngle=SJ.jumper.body.angle-(this.angle-HALF_PI);for(;relativeAngle>PI;)relativeAngle-=PI;return relativeAngle/=PI},this.getVectorAngle=vector=>atan2(vector.y,vector.x),this.getVectorFromAngle=(angle,length=1)=>{const x=cos(angle)*length,y=sin(angle)*length;return Matter.Vector.create(x,y)}}
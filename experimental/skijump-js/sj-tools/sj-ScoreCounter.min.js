SJ.Rater=class{constructor(rateFunc,getScore){this.rate=rateFunc,this.score=0,this.getScore=getScore||(()=>this.score)}},SJ.ScoreCounter=class{constructor(){this.jumpRater=new SJ.Rater(()=>{const jumperX=SJ.jumper.body.position.x,jumpAreaWidth=JUMP_END_POINT-JUMP_POINT,jumperRelativeX=jumperX-JUMP_POINT,proportion=jumperRelativeX/jumpAreaWidth;this.jumpRater.score=round(40*proportion),this.jumpRater.score/=2}),this.stableFlyRater=new SJ.Rater(()=>{const currentAnlge=SJ.jumper.body.angle,relativeAngle=abs(currentAnlge-this.stableFlyRater.jumperPreviousAngle);this.stableFlyRater.reachedJumperAngle+=relativeAngle,this.stableFlyRater.jumperPreviousAngle=currentAnlge,print(degrees(relativeAngle))},()=>{const reachedAngle=degrees(this.stableFlyRater.reachedJumperAngle),maxBestAngle=50;if(reachedAngle<50)return 20;{const maxAcceptedRotate=300,score=round((maxAcceptedRotate-reachedAngle)/(maxAcceptedRotate-50)*40)/2;return max(min(score,20),0)}}),this.stableFlyRater.reachedJumperAngle=0,this.stableFlyRater.jumperPreviousAngle=0,this._raters=[this.jumpRater,this.stableFlyRater],this._PIXELS_TO_METERS=SJ.V.padSize/(POINT_K-JUMP_END_POINT),this._POINT_PER_METER=2.8,this.score=0}calculateDistance(){const landX=SJ.jumper.body.position.x,distTo_K=landX-POINT_K,mettersDistTo_K=distTo_K*this._PIXELS_TO_METERS;let points=60+mettersDistTo_K*this._POINT_PER_METER;return points=round(points,2)}calculateScore(){let score=0;this._raters.forEach(rater=>{score+=rater.getScore()}),score+=this.calculateDistance(),this.score=score}rate(){}};
SJ.higherJumperSpeed=0,SJ.higherJumperHeight=0,SJ.Rater=class{constructor(rateFunc,getScore){this.rate=rateFunc,this.score=0,this.getScore=getScore||(()=>this.score)}},SJ.ScoreCounter=class{constructor(){this.previousJumperAngle=0,this.jumpRater=new SJ.Rater(()=>{const jumperX=SJ.jumper.body.position.x,jumpAreaWidth=SJ.V.jumpEndPoint-SJ.V.jumpStartPoint,jumperRelativeX=jumperX-SJ.V.jumpStartPoint,proportion=jumperRelativeX/jumpAreaWidth;this.jumpRater.score=round(40*proportion),this.jumpRater.score/=2}),this.stableFlyRater=new SJ.Rater(()=>{const currentAnlge=SJ.jumper.body.angle,relativeAngle=abs(currentAnlge-this.previousJumperAngle);this.stableFlyRater.reachedJumperAngle+=relativeAngle},()=>{const reachedAngle=degrees(this.stableFlyRater.reachedJumperAngle),maxBestAngle=50;if(reachedAngle<50)return 20;{const maxAcceptedRotate=300,score=round((maxAcceptedRotate-reachedAngle)/(maxAcceptedRotate-50)*40)/2;return max(score,0)}}),this.stableFlyRater.reachedJumperAngle=0,this.rotatingSpeedRater=new SJ.Rater(()=>{const currentAnlge=SJ.jumper.body.angle,relativeAngle=abs(currentAnlge-this.previousJumperAngle),maxAcceptedRelativeAngle=radians(1);relativeAngle>maxAcceptedRelativeAngle&&(this.rotatingSpeedRater.score-=.1)},()=>{const score=round(this.rotatingSpeedRater.score)/2;return max(score,0)}),this.rotatingSpeedRater.score=40,this.distanceRater=new SJ.Rater(()=>{const relativeDist=this.mettersDistTo_K-SJ.V.minJumpDistance,maxminDist=SJ.V.maxJumpDistance-SJ.V.minJumpDistance,proportion=relativeDist/maxminDist;this.distanceRater.score=max(min(round(40*proportion)/2,20),0)}),this.landingRater=new SJ.Rater(()=>{if(SJ.jumper.failed)this.landingRater.score=0,print("Jumper failed!");else{const diff=millis()-this.landingRater.landMoment;print("Current moment: ",millis());const maxBestDiff=50;if(diff<=maxBestDiff)this.landingRater.score=20;else{const maxAcceptedDiff=200,score=round((maxAcceptedDiff-diff)/(maxAcceptedDiff-maxBestDiff)*40)/2;this.landingRater.score=max(score,0)}print("Landing time diff: ",diff),print("Score: ",this.landingRater.score)}}),this.landingRater.onJumperLand=()=>{this.landingRater.landMoment=millis(),print("Landed moment: ",this.landingRater.landMoment)},this._raters=[this.jumpRater,this.stableFlyRater,this.rotatingSpeedRater,this.distanceRater,this.landingRater],this.PIXELS_TO_METERS=SJ.V.padSize/(SJ.V.pointK-SJ.V.jumpEndPoint),this._POINT_PER_METER=2.8,this.score=0}update(){SJ.jumper.body.isStatic||(this.stableFlyRater.rate(),this.rotatingSpeedRater.rate(),this.previousJumperAngle=SJ.jumper.body.angle)}calculateDistance(){const landX=SJ.jumper.body.position.x,distTo_K=landX-SJ.V.pointK;this.mettersDistTo_K=distTo_K*this.PIXELS_TO_METERS;let points=60+this.mettersDistTo_K*this._POINT_PER_METER;return points=round(points,2),points}calculateScore(){let score=this.calculateDistance();this.distanceRater.rate(),this.landingRater.rate(),this._raters.forEach(rater=>{score+=rater.getScore(),print(rater)}),this.score=max(score,0)}forEachRaters(callback){this._raters.forEach(rater=>{callback(rater)})}onJumperLand(){this.landingRater.onJumperLand()}rate(){}};
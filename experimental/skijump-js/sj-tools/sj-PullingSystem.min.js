SJ.PullingSystem=class{constructor(){this.pullingArray=SJ.V.padPullingPoints,this.jumperFrictionMult=1,this.p1=null,this.p2=null,this.setIndex(1)}setIndex(newIndex){this.index=newIndex,this.p1=this.pullingArray[newIndex-1],this.p2=this.pullingArray[newIndex]}update(){const jumperPos=SJ.jumper.body.position;if(jumperPos.x>=this.p2.x){if(this.index++,!(this.index<this.pullingArray.length))return this.index=1,!1;this.p1=this.p2,this.p2=this.pullingArray[this.index]}return jumperPos.x>=SJ.V.jumpPoint&&jumperPos.x<=SJ.V.jumpEndPoint&&(SJ.pad._canJump=!0,SJ.MessagesManager.canJump()),SJ.jumper.isSlowingDown||jumperPos.x>=SJ.V.fallLine&&(SJ.jumper.isSlowingDown=!0),!0}setNewVelocityAndAngle(){const diff_x=this.p2.x-this.p1.x,diff_y=this.p2.y-this.p1.y,alpha=atan2(diff_y,diff_x),acc=sin(alpha)*SJ.world.gravity.y,currVel=SJ.jumper.body.velocity,currVelMag=Matter.Vector.magnitude(currVel);if(SJ.jumper.setAngle(lerp(SJ.jumper.body.angle,alpha+SJ.jumper.offsetAngle,.1)),SJ.jumper.isSlowingDown)return;let newVel=Matter.Vector.create(0,0);newVel.x=currVelMag,newVel=Matter.Vector.rotate(newVel,alpha);let accVec=Matter.Vector.create(acc,0);accVec=Matter.Vector.rotate(accVec,alpha),newVel=Matter.Vector.add(newVel,accVec),newVel=Matter.Vector.mult(newVel,1-SJ.V.padFriction-this.jumperFrictionMult*SJ.V.jumperFriction),SJ.jumper.body.velocity=newVel}};
function Jumper(x,y){this.w=10,this.h=20,this.friction=.007;const options={friction:0,frictionAir:.005,density:1,isStatic:!0,parts:[Bodies.rectangle(x,y,this.w,this.h),Bodies.rectangle(x+5,y+.5*this.h+3,this.w+15,5),Bodies.circle(x-.5*this.w-5,y+.5*this.h+2.5,3),Bodies.circle(x+.5*this.w+12,y+.5*this.h+2.5,3)]};this.body=Body.create(options),World.add(world,this.body),Body.setAngle(this.body,radians(40)),this.JUMP_FORCE=.0025,this.TURN_FORCE=.2,this.turningDir=0,this.turningMod=0,this.wantTurn=!1,this.offsetPoint=Matter.Vector.create(0,-10),this.update=()=>{if(this.body.isStatic){const rotatedOffset=Matter.Vector.rotate(this.offsetPoint,this.body.angle);Matter.Body.translate(this.body,this.body.velocity)}Matter.Query.collides(this.body,[pad.body]).length,this.turningMod&&(this.wantTurn?this.turningMod=min(this.turningMod+.005,1):this.turningMod=max(this.turningMod-.01,0),this.turn())},this.draw=()=>{const pos=this.body.position,angle=this.body.angle;push(),translate(pos.x,pos.y),rotate(angle),rect(0,0,this.w,this.h),pop(),this.body.parts.forEach(part=>{beginShape(),part.vertices.forEach(element=>{vertex(element.x,element.y)}),endShape(CLOSE)})},this.onKeyPressed=keyCode=>{if("Space"==keyCode||("ArrowLeft"==keyCode?(this.turningDir=-1,this.wantTurn=!0,this.turningMod=.1):"ArrowRight"==keyCode&&(this.turningDir=1,this.wantTurn=!0,this.turningMod=.1)),"CapsLock"==keyCode&&(this.body.isStatic=!this.body.isStatic),this.body.isStatic){const MOVE_SPEED=10;"KeyW"==keyCode?Matter.Body.setPosition(this.body,{x:this.body.position.x,y:this.body.position.y-MOVE_SPEED}):"KeyS"==keyCode?Matter.Body.setPosition(this.body,{x:this.body.position.x,y:this.body.position.y+MOVE_SPEED}):"KeyA"==keyCode?Matter.Body.setPosition(this.body,{x:this.body.position.x-MOVE_SPEED,y:this.body.position.y}):"KeyD"==keyCode&&Matter.Body.setPosition(this.body,{x:this.body.position.x+MOVE_SPEED,y:this.body.position.y})}},this.onKeyReleased=keyCode=>{"ArrowLeft"==keyCode?this.wantTurn=!1:"ArrowRight"==keyCode&&(this.wantTurn=!1)},this.jump=()=>{const jumpAngle=this.body.angle;let jumpVector=Matter.Vector.create(0,-this.JUMP_FORCE);jumpVector=Matter.Vector.rotate(jumpVector,jumpAngle),Body.applyForce(this.body,this.body.position,jumpVector)},this.turn=()=>{Body.rotate(this.body,this.TURN_FORCE*this.turningMod*this.turningDir)}}